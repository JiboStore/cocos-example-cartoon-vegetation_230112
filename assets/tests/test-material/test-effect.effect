// Copyright (c) 2017-2019 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: water-vs:vert
      frag: water-fs:frag
      properties: &props
        mainColor:      { value: [1.0, 1.0, 1.0, 1.0], target: albedo, editor: { displayName: Albedo, type: color } }
        
        occlusion:      { value: 1.0, target: pbrParams.x }
        roughness:      { value: 0.1, target: pbrParams.y }
        metallic:       { value: 0, target: pbrParams.z }
        
        normalStrenth:  { value: 0.5, target: normalParams.x, editor: { parent: USE_NORMAL_MAP } }
        normalTile:     { value: 1, target: normalParams.y, editor: { parent: USE_NORMAL_MAP } }
        normalSpeed:    { value: [ 1, 0 ], target: normalParams.zw , editor: { parent: USE_NORMAL_MAP } }
        normalMap:      { value: normal, editor: { parent: USE_NORMAL_MAP } }

        depthDistance:  { value: 1. }
        shallowColor:   { value: [1, 1, 1, 1], editor: { type: color }  }
        deepColor:      { value: [0, 0, 0, 0] , editor: { type: color } }

        foamScale1:     { value: [1, 1], target: foamParams2.xy, editor: { parent: USE_FOAM_1 } }
        foamColor1:     { value: [1, 1, 1, 1], editor: { parent: USE_FOAM_1, type: color } }

        foamScale2:     { value: [1, 1], target: foamParams2.zw, editor: { parent: USE_FOAM_2 } }
        foamColor2:     { value: [1, 1, 1, 1], editor: { parent: USE_FOAM_2, type: color } }

        foamCutOff:     { value: 0.5, target: foamParams.x, editor: { parent: USE_FOAM } }
        foamDepth:      { value: 0.3, target: foamParams.y, editor: { parent: USE_FOAM } }
        foamDistortion: { value: 1.222, target: foamParams.z, editor: { parent: USE_FOAM } }
        foamFade:       { value: 1, target: foamParams.w, editor: { parent: USE_FOAM } }
        foamTexture:    { value: white, editor: { parent: USE_FOAM } }

        waveVisuals:    { value: [ 0.167, 7, 0.54, 1 ], editor: { parent: USE_WAVE } }
        waveDirections: { value: [ 0, 0.3, 0.6, 0.67 ], editor: { parent: USE_WAVE } }

        causticStrength:    { value: 0.98,  target: causticParams1.x, editor: { parent: USE_CAUSTIC } }
        causticScale:       { value: 2.33,  target: causticParams1.y, editor: { parent: USE_CAUSTIC } }
        causticSpeed:       { value: 0.1,   target: causticParams1.z, editor: { parent: USE_CAUSTIC } }
        causticRGBSplit:    { value: 0.35,  target: causticParams1.w, editor: { parent: USE_CAUSTIC } }
        causticMinStrength: { value: 0.05,  target: causticParams2.x, editor: { parent: USE_CAUSTIC } }
        causticColor:       { value: [1, 1, 1],   target: causticParams2.yzw, editor: { parent: USE_CAUSTIC, type: color } }
        causticTexture:     { value: white, editor: { parent: USE_CAUSTIC } }

  - name: transparent
    passes:
    - vert: water-vs:vert
      frag: water-fs:frag
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram shared-ubos %{
  #define pi 3.14

  uniform Constants {
    vec4 albedo;
    vec4 pbrParams;
    vec4 emissive;
    vec4 emissiveScaleParam;
  };

  uniform Water {
    vec4 normalParams;
    vec4 shallowColor;
    vec4 deepColor;
    vec4 waveVisuals;
    vec4 waveDirections;
    vec4 foamParams;
    vec4 foamParams2;
    vec4 foamColor1;
    vec4 foamColor2;
    vec4 causticParams1;
    vec4 causticParams2;
    float depthDistance;
  };
}%

CCProgram water-vs %{
  precision highp float;
  #include <input-standard>
  #include <cc-global>
  #include <cc-local-batch>
  #include <shared-ubos>

  out vec3 v_position;
  out vec4 v_projPos;
  out vec3 v_normal;

  #if USE_NORMAL_MAP
    out vec3 v_tangent;
    out vec3 v_bitangent;
  #endif

  out vec2 v_uv;
  in vec2 a_texCoord1;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 worldPos = matWorld * In.position;

    v_position = worldPos.xyz;
    v_projPos = cc_matProj * cc_matView * worldPos;

  
    v_uv = a_texCoord;
    

    return v_projPos;
  }
}%

CCProgram water-fs %{
  precision highp float;
  #include <cc-global>
  #include <gamma>
  #include <shared-ubos>

  #include <packing>

  in vec3 v_position;
  in vec4 v_projPos;
  in vec2 v_uv;
  in vec3 v_normal;

  // #pragma builtin(global)
  // layout(set = 0, binding = 6) uniform sampler2D cc_depth_buffer_map;

  #if USE_FOAM
  uniform sampler2D foamTexture;
  #endif

  #if USE_CAUSTIC
  uniform sampler2D causticTexture;
  #endif

  // #if USE_VERTEX_COLOR
  //   in vec3 v_color;
  // #endif

  #if USE_NORMAL_MAP
    in vec3 v_tangent;
    in vec3 v_bitangent;
    uniform sampler2D normalMap;
  #endif

  vec4 frag () {
    return vec4(1.);
  }
}%
